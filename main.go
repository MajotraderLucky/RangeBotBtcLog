package main

import (
	"log"
	"os"
	"time"

	"github.com/MajotraderLucky/MarketRepository/initlog"
	"github.com/MajotraderLucky/MarketRepository/klinesdata"
	"github.com/MajotraderLucky/MarketRepository/orderinfolog"
	"github.com/MajotraderLucky/MarketRepository/positionlog"
	"github.com/MajotraderLucky/MarketRepository/positionmanagement"
	"github.com/MajotraderLucky/MarketRepository/tradinglog"
	"github.com/MajotraderLucky/MarketRepository/transactions"
	"github.com/MajotraderLucky/Utils/logger"
)

func main() {
	var file *os.File
	for range time.Tick(time.Second * 30) {
		logger := logger.Logger{}
		err := logger.CreateLogsDir()
		if err != nil {
			log.Fatal(err)
		}
		err = logger.OpenLogFile()
		if err != nil {
			log.Fatal(err)
		}
		logger.SetLogger()
		logger.LogLine()

		// If all files are found, start the program
		if initlog.CheckFilesExist() {
			log.Println("----------All files found, starting program----------")
		}

		log.Println("Btc bot started...")

		initlog.Init()

		autoGeneratedPos := positionlog.GetAutoGeneratedPos()
		hasOpenPos := positionlog.IsOpenPositions(autoGeneratedPos)
		log.Println("Has open positions: ", hasOpenPos)
		positionlog.GetOpenPositionVolume(autoGeneratedPos)

		logger.LogLine()

		positionlog.WritePositionsToFile(autoGeneratedPos)

		logger.LogLine()

		klinesdata.GetDebthData()
		klinesdata.KlinesInfo()
		klinesdata.FindMinMaxInfo()
		klinesdata.GetFibonacciLevelsReturns()
		klinesdata.FindPriceCorridor()
		klinesdata.IsCorridorHigher(5)

		orderinfolog.Hello()
		orderinfolog.GetOpenOrdersInfoJson()
		logger.LogLine()

		tradinglog.GetFiboLevelStartTrade()

		logger.LogLine()
		transactions.Hello()

		floLevels, err := klinesdata.GetFibonacciLevelsReturns()
		if err != nil {
			log.Fatalf("Error getting Fibonacci levels: %v", err)
		}

		intLevels, err := klinesdata.ConvertFibonacciLevelsToInts(floLevels)
		if err != nil {
			log.Fatalf("Error converting Fibonacci levels to integers: %v", err)
		}

		log.Println("Fibonacci levels to ints", intLevels)

		strLevels, err := klinesdata.ConvertIntsToStrings(intLevels)
		if err != nil {
			log.Fatalf("Error converting ints to strings: %v", err)
		}
		log.Println("Ints to strings", strLevels)

		positionAmt, entryPrice, err := positionlog.GetPositionData(autoGeneratedPos)
		if err != nil {
			log.Fatalf("Error getting position data: %v", err)
		}
		log.Println("Position Amt: ", positionAmt)
		log.Println("Entry Price: ", entryPrice)

		file, err := os.Open("logs/orders.json")
		if err != nil {
			log.Fatal(err)
		}

		openOrder382 := tradinglog.IsStartTradeLevel382Met() &&
			positionAmt == "0.000" && !orderinfolog.CheckLimitOrders(file)
		openOrder500 := tradinglog.IsStartTradeLevel500Met() &&
			positionAmt == "0.000" && !orderinfolog.CheckLimitOrders(file)
		openOrder618 := tradinglog.IsStartTradeLevel618Met() &&
			positionAmt == "0.000" && !orderinfolog.CheckLimitOrders(file)
		openOrder786 := tradinglog.IsStartTradeLevel786Met() &&
			positionAmt == "0.000" && !orderinfolog.CheckLimitOrders(file)

		openTakeProfitOrder := !orderinfolog.CheckTakeProfitMarketOrders(file)

		if openOrder382 {
			transactions.CreateLimitOrder("0.003", strLevels[1])
			log.Println("Created limit order for level 382")
			if openTakeProfitOrder {
				transactions.CreatTakeProfitOrder("0.003", strLevels[0])
			}
		}

		if openOrder500 {
			transactions.CreateLimitOrder("0.004", strLevels[2])
			log.Println("Created limit order for level 500")
			if openTakeProfitOrder {
				transactions.CreatTakeProfitOrder("0.004", strLevels[1])
			}
		}

		if openOrder618 {
			transactions.CreateLimitOrder("0.005", strLevels[3])
			log.Println("Created limit order for level 618")
			if openTakeProfitOrder {
				transactions.CreatTakeProfitOrder("0.005", strLevels[2])
			}
		}

		if openOrder786 {
			transactions.CreateLimitOrder("0.006", strLevels[4])
			log.Println("Created limit order for level 786")
			if openTakeProfitOrder {
				transactions.CreatTakeProfitOrder("0.006", strLevels[3])
			}
		}

		openStopLossOrder382 := openOrder382 &&
			!orderinfolog.CheckStopMarketOrders(file)

		openStopLossOrder500 := openOrder500 &&
			!orderinfolog.CheckStopMarketOrders(file)

		openStopLossOrder618 := openOrder618 &&
			!orderinfolog.CheckStopMarketOrders(file)

		openStopLossOrder786 := openOrder786 &&
			!orderinfolog.CheckStopMarketOrders(file)

		maxFloat64, minFloat64, err := klinesdata.FindMinMaxInfo()
		if err != nil {
			log.Fatalf("Error finding min and max values: %v", err)
		}

		maxString, minString, err := klinesdata.ConvertMaxMinToString(maxFloat64, minFloat64)
		if err != nil {
			log.Fatalf("Error converting max and min values to strings: %v", err)
		}
		log.Println("Max: ", maxString)
		log.Println("Min: ", minString)

		transactions.ProcessStopLossOrder(openStopLossOrder382, "0.003", strLevels[2])
		transactions.ProcessStopLossOrder(openStopLossOrder500, "0.004", strLevels[3])
		transactions.ProcessStopLossOrder(openStopLossOrder618, "0.005", strLevels[4])
		transactions.ProcessStopLossOrder(openStopLossOrder786, "0.006", minString)

		positionmanagement.Hello()

		logger.CleanLogCountLines(200)
	}
	defer file.Close()

}
