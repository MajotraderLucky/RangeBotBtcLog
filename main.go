package main

import (
	"context"
	"encoding/json"
	"log"
	"os"

	"github.com/MajotraderLucky/MarketRepository/initlog"
	"github.com/MajotraderLucky/MarketRepository/positionlog"
	"github.com/MajotraderLucky/Utils/logger"

	"github.com/adshao/go-binance/v2"
	"github.com/joho/godotenv"
)

func main() {
	logger := logger.Logger{}
	err := logger.CreateLogsDir()
	if err != nil {
		log.Fatal(err)
	}
	err = logger.OpenLogFile()
	if err != nil {
		log.Fatal(err)
	}
	logger.SetLogger()
	logger.LogLine()

	log.Println("Btc bot started...")

	initlog.Init()

	positionlog.Hello()

	if err := godotenv.Load(); err != nil {
		log.Println("No.env file found.")
	}
	log.Println(".env file loaded.")

	apiKey, exists := os.LookupEnv("BINANCE_API_KEY")
	if !exists {
		log.Fatal("BINANCE_API_KEY not set")
	}

	secretKey, exexists := os.LookupEnv("BINANCE_SECRET_KEY")
	if !exexists {
		log.Fatal("BINANCE_SECRET_KEY not set")
	}

	futuresClient := binance.NewFuturesClient(apiKey, secretKey)

	accServ, err := futuresClient.NewGetAccountService().Do(context.Background())
	if err != nil {
		log.Println(err)
		return
	}
	accServVar, _ := json.Marshal(accServ)
	fileJson, err := json.Marshal(accServ)
	if err != nil {
		panic(err)
	}
	err = os.WriteFile("fileJson.json", fileJson, 0644)
	if err != nil {
		panic(err)
	}

	var autoGeneratedPos positionlog.AutoGeneratedPos
	json.Unmarshal(accServVar, &autoGeneratedPos)

	var positionBTCindex int

	for k := 0; k < len(autoGeneratedPos.Positions); k++ {
		if autoGeneratedPos.Positions[k].Symbol == "BTCUSDT" {
			positionBTCindex = k
		}
	}
	log.Println("Item positions total:", len(autoGeneratedPos.Positions[positionBTCindex].PositionAmt))

	hasOpenPos := positionlog.HasOpenPositions(autoGeneratedPos)
	log.Println("Has open positions: ", hasOpenPos)
}
